#include <iostream>
#include <algorithm>
#include <vector>
#include <map>

#define ll long long
#define min(u,v)(((u)<(v)) ? (u) : (v))
#define max(u,v)(((u)>(v)) ? (u) : (v))
#define mp make_pair
#define endl '\n'
#define pb push_back
#define fast ios_base::sync_with_stdio(false); cin.tie(nullptr);

using namespace std;
const double eps = numeric_limits<double>::epsilon();
const size_t N_MAX = 1<<30;


//array
class disjointSets{
    size_t* parent=new size_t[N_MAX];
    size_t* sz=new size_t[N_MAX];
    size_t nbrSets;
public:
    disjointSets(size_t n):nbrSets(n){
       for(size_t i=0u;i<nbrSets;++i){
            parent[i] = i;
            sz[i] = 1u;
       }
    }

    size_t find(size_t e){
        return parent[e]==e?e:parent[e]=find(parent[e]);
    }

    bool merge(size_t x , size_t y){
        size_t px = find(x);
        size_t py = find(y);
        if(px==py){
            return false;
        }
        if(sz[px]>sz[py]){
            swap(px,py);
        }
        parent[px]=py;
        sz[py]+=sz[px];
        sz[px]=0u;
        --nbrSets;
        return true;
    }

    size_t sizeOfSet(size_t x){
        return sz[find(x)];
    }

    size_t nbrOfSets(){
        return nbrSets;
    }

    bool sameSet(size_t x,size_t y){
        return find(x)==find(y) ;
    }
};

//vector
class disjointSetsVector{
	vector<size_t>parent;
	vector<size_t>sz;
	size_t nbr;
public:
	disjointSetsVector(size_t n):nbr(n){
		parent.reserve(nbr);
		sz.reserve(nbr);
		for(size_t i=0u;i<n;i++){
			parent[i]=i;
			sz[i]=1u;
		}
	}

	size_t find(size_t v){
		return parent[v]==v?v:parent[v]=find(parent[v]);
	}

	bool merge(size_t a, size_t b){
		a=find(a);
		b=find(b);
		if(a!=b){
			if(sz[a]>sz[b]) swap(a,b);
			parent[a]=b;
			sz[b]+=sz[a];
			sz[a]=0u;
			--nbr;
			return true;
		}
		return false;
	}

	size_t sizeOfSet(size_t v){
		return sz[find(v)];
	}

	bool sameSet(size_t a, size_t b){
		return find(a)==find(b);
	}

	size_t nbrOfSets(){
		return nbr;
	}
};


int main(void)
{
//    freopen("input/progression-in.txt", "r", stdin);
//    freopen("output/progression-myOut.txt", "w", stdout);

    int t;
    cin >> t;
    while(t--)
    {
        size_t r,j=0;
        cin >> r;
        string a, b;
        map<string, size_t> number;
        disjointSets sets = disjointSets(2*r);
        for(int i=0; i<r; ++i)
        {
            cin >> a >> b;
            if(!number[a]){
                number[a] = j++;
            }
            if(!number[b]){
                number[b] = j++;
            }
            sets.merge(number[a], number[b]);
            cout << sets.sizeOfSet(number[a])<<endl;
        }
    }

 return 0;
}
