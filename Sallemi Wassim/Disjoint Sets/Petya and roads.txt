#include <iostream>
#include <algorithm>
#include <vector>

#define ll long long
#define min(u,v)(((u)<(v)) ? (u) : (v))
#define max(u,v)(((u)>(v)) ? (u) : (v))
#define mp make_pair
#define endl '\n'
#define pb push_back
#define fast ios_base::sync_with_stdio(false); cin.tie(nullptr);

using namespace std;
const double eps = numeric_limits<double>::epsilon();
const size_t N_MAX = 1<<30;


//array
class disjointSets{
    size_t* parent=new size_t[N_MAX];
    size_t* sz=new size_t[N_MAX];
    size_t nbrSets;
public:
    disjointSets(size_t n):nbrSets(n){
       for(size_t i=0u;i<nbrSets;++i){
            parent[i] = i;
            sz[i] = 1u;
       }
    }

    size_t find(size_t e){
        return parent[e]==e?e:parent[e]=find(parent[e]);
    }

    bool merge(size_t x , size_t y){
        size_t px = find(x);
        size_t py = find(y);
        if(px==py){
            return false;
        }
        if(sz[px]>sz[py]){
            swap(px,py);
        }
        parent[px]=py;
        sz[py]+=sz[px];
        sz[px]=0u;
        --nbrSets;
        return true;
    }

    bool sameSet(size_t x,size_t y){
        return find(x)==find(y) ;
    }
    size_t nbrOfSets(){
        return nbrSets;
    }
};
bool cmp(pair<pair<size_t, size_t>, int> & a,pair<pair<size_t, size_t>, int> & b){
        return a.second < b.second;
    }

int main(void)
{
    int t;
    cin >> t;
    while(t--)
    {
        size_t n, m;
        cin >> n >> m;
        disjointSets sets = disjointSets(n+1);
        vector<pair<pair<size_t, size_t>, int>> edges;
        int x;
        for(size_t i=1;i<=n;i++){
            cin >> x;
            if(x){
                edges.pb(mp(mp(i, n+1), 0));
            }
        }
        size_t a, b;
        ll ans=0, c;
        for(int i=0;i<m;i++){
            cin >> a >> b >> c;
                edges.pb(mp(mp(a, b), c));
            }

        sort(edges.begin(), edges.end(), cmp);
        for(auto e:edges){
            bool merged = sets.merge(e.first.first-1, e.first.second-1);
            if(merged){
                ans += e.second;
            }
        }

        if(sets.nbrOfSets() == 1){
            cout << ans << endl;
        }else{
            cout << "impossible" <<endl;
        }
    }
    return 0;
}