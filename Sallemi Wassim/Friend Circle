#include <bits/stdc++.h>

#define ll long long
#define min(u,v)(((u)<(v)) ? (u) : (v))
#define max(u,v)(((u)>(v)) ? (u) : (v))
#define mp make_pair
#define endl '\n'
#define pb push_back



using namespace std;
const double eps = numeric_limits<double>::epsilon();
const size_t N = 100000+5;
int j=1;

int parent[N];
unordered_map<int, int> setSize;
unordered_map<string, int> number;


int findParent(int i)
{
    if(i == parent[i]){
        return i;
    }
    else{
        return findParent(parent[i]);
    }
}


void unionSets(int i, int j){
    int irep = findParent(i);
    int jrep = findParent(j);
    parent[irep] = jrep;
    setSize[jrep] += setSize[irep];
}

void createSet(string a){
    // create set of rep a
    number[a]= j++;
    parent[number[a]] = number[a];
    setSize[number[a]] = 1;

}


int main()
{
//    freopen("input/progression-in.txt", "r", stdin);
//    freopen("output/progression-myOut.txt", "w", stdout);

    int t;
    cin >> t;
    while(t--)
    {
        int n;
        j=1;
        cin >> n;
        string a, b;
        setSize.clear();
        number.clear();
        memset(parent, 0, sizeof(parent));

        for(int i=0; i<n; ++i)
        {
            cin >> a >> b;

            //if both a and b exist
            if(number[b] && number[a])
            {
                //union b to a's representative and add cardinality
                unionSets(number[b], number[a]);
            }

            //if a already exists and b don't
            else if(number[a])
            {
                createSet(b);
                //union b to a's representative and add cardinality
                unionSets(number[b], number[a]);
            }

            //else if b already exists and a don't
            else if(number[b])
            {
                createSet(a);
                //union a to b's representative
                unionSets(number[a], number[b]);
            }
            // else if neither a nor b exist
            else
            {
                createSet(a);
                createSet(b);
                //union b to a's representative
                unionSets(number[b], number[a]);
            }
            cout << setSize[findParent(number[a])]<<endl;
        }
    }


 return 0;
}
