#include <iostream>
#include<vector>
#include<algorithm>
#include<bits/stdc++.h>

using namespace std;
class DisjointSets{

public:
    vector<int> parent;
    vector<int>sz ;
    int nbsets;
public:
    DisjointSets(int n):nbsets(n){
        parent.resize(n);
        sz.resize(n);
        for(int i=0;i<n;++i){
            parent[i] = i;
            sz[i] = 1 ;}
    }
    int find (int a){
    return parent[a]==a ?a:parent[a]=find(parent[a]);}

    bool  merge(int a ,int b){
    int pa = find(a);
    int pb = find(b);
    if (pa==pb){return false;}
    if (sz[pa]>sz[pb]){switch(pa,pb);}
        parent[pb] = pa ;
        sz[pa]+= sz[pb] ;
        nbsets--;
         return (true );
    }

};

int main()
{  int n , m ;
   cin >> n ;
   m = n;
   m--;
   vector<pair<int ,int>> circuit ;
   DisjointSets Ds (n+1);
   int a , b ;
   while(m--){
    cin >> a >>b ;
    bool r = Ds.merge(a,b) ;
    if (not(r)){
        circuit.push_back(make_pair(a,b));

    }
    }
    vector<int> alone ;
    if (Ds.nbsets!=2){
        for (int i=1;i<n+1;++i){
            if (Ds.parent[i]==i){
                    alone.push_back(i);
            }
        }
        cout << Ds.nbsets -2  <<endl;
        for (int i=0;i<alone.size()-1;i++){
            if (not(circuit.empty())){
                cout << circuit[0].first <<' '<<circuit[0].second<<' ';
                circuit.erase(circuit.begin());
            bool r = Ds.merge(Ds.find(alone[i]),alone[i+1]);
            cout <<alone[i]<<' '<<alone[i+1]<<endl;

            }

            }
        }
        else {cout <<0 <<endl;}
    return 0;
}
